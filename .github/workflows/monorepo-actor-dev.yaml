name: Release Dev Actor to GHCR
on:
  workflow_dispatch:
  push:
    tags:
      - "*_*-actor-dev"
env:
  environment: dev
  # For the release action, you'll have to set the following variables
  WASH_ISSUER_KEY: ${{ secrets.WASH_ISSUER_KEY }}
  WASMCLOUD_PAT: ${{ secrets.WASMCLOUD_PAT }}
  # To push to private vendoring platform - sticking to ghcr right now
  # CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
  # To pull Rust crates from private vendoring platform
  CARGO_REGISTRIES_JAMMINMUSIC_CRATES_INDEX: ${{ secrets.CARGO_REGISTRIES_JAMMINMUSIC_CRATES_INDEX }}

jobs:
  set_variables:
    environment: dev # for env secrets
    runs-on: ubuntu-latest
    outputs:
      actor_name_output: ${{ steps.set_actor_name.outputs.actor_name }}
      feature_name_output: ${{ steps.set_feature_name.outputs.feature_name }}
      working_dir_output: ${{ steps.set_working_dir.outputs.working_dir }}
      subject_key_output: ${{ steps.set_subject_key.outputs.subject_key }}
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Extract Feature Name from Tag
        run: |
          tag=${GITHUB_REF#refs/tags/*-actor-dev/}
          tag2=${tag%%_*}
          echo "FEATURE_NAME=${tag2##*\/}" >> $GITHUB_ENV
      - name: Extract Actor Name from Tag
        run: |
          tag=${GITHUB_REF#refs/tags/*-actor-dev/}
          tag2=${tag%%-*}
          echo "ACTOR_NAME=${tag2##*_}" >> $GITHUB_ENV
      - name: Set Working Directory
        run: |
          echo "WORKING_DIR=$PWD/$FEATURE_NAME/${FEATURE_NAME}_actors/${FEATURE_NAME}_$ACTOR_NAME" >> $GITHUB_ENV
      - name: Build Subject Key Secret String
        run: |
          secret_prefix='WASH_'
          secret_unique=$(echo "${FEATURE_NAME}_${ACTOR_NAME}" | tr 'a-z' 'A-Z')
          secret_suffix='_KEY'
          secret=${secret_prefix}${secret_unique}${secret_suffix}
          echo "SECRET_STRING=$secret" >> $GITHUB_ENV
      - name: Output Actor Name
        id: set_actor_name
        run: echo "actor_name=$ACTOR_NAME" >> $GITHUB_OUTPUT
      - name: Output Feature Name
        id: set_feature_name
        run: echo "feature_name=$FEATURE_NAME" >> $GITHUB_OUTPUT
      - name: Output Working Directory
        id: set_working_dir
        run: echo "working_dir=$WORKING_DIR" >> $GITHUB_OUTPUT
      - name: Output Wash Subject Key
        id: set_subject_key
        run: echo "subject_key=$SECRET_STRING" >> $GITHUB_OUTPUT

  build_signed_actor:
    environment: dev # for env secrets
    needs: [set_variables]
    runs-on: ubuntu-latest
    env:
      ACTOR_NAME: ${{ needs.set_variables.outputs.actor_name_output }}
      FEATURE_NAME: ${{ needs.set_variables.outputs.feature_name_output }}
      WORKING_DIR: ${{ needs.set_variables.outputs.working_dir_output }}
      WASH_SUBJECT_KEY: ${{ secrets[needs.set_variables.outputs.subject_key_output] }}
    steps:
      - name: Checkout (GitHub)
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Install wash
        run: |
          curl -s https://packagecloud.io/install/repositories/wasmCloud/core/script.deb.sh | sudo bash
          sudo apt install wash=0.14.0
      - name: Add wasm32-unknown-unknown
        run: rustup target add wasm32-unknown-unknown
      # Once you've written unit tests for your actor, you can uncomment
      # the two lines below to automatically run tests
      # - name: Test Actor
      #   run: cargo test --target x86_64-unknown-linux-gnu -- --nocapture
      #   working-directory: ${{ env.WORKING_DIR }}
      - name: Build wasmCloud Actor
        run: wash build
        working-directory: ${{ env.WORKING_DIR }}
      - name: Upload Signed Actor to GH Actions
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ACTOR_NAME }}
          path: ${{ env.WORKING_DIR }}/build/*.wasm
          if-no-files-found: error

  artifact_release:
    environment: dev # for env secrets
    needs: [set_variables, build_signed_actor]
    runs-on: ubuntu-latest
    env:
      ACTOR_NAME: ${{ needs.set_variables.outputs.actor_name_output }}
      FEATURE_NAME: ${{ needs.set_variables.outputs.feature_name_output }}
    steps:
      - uses: actions/checkout@v3
      - name: Install wash
        run: |
          curl -s https://packagecloud.io/install/repositories/wasmCloud/core/script.deb.sh | sudo bash
          sudo apt install wash=0.14.0
      - name: Download Signed Actor
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.ACTOR_NAME }}
          path: ${{ env.FEATURE_NAME }}_${{ env.ACTOR_NAME }}/build
      - name: Convert Repo Name to Lowercase # OCI Bug requirement - I prefer using Captitalized TLD's for visualization purposes
        run: |
          echo "REPO_LOWER=$(echo ${{ github.REPOSITORY }} | tr 'A-Z' 'a-z')" >> $GITHUB_ENV
      - name: Push Actor to GHCR
        env:
          WASH_REG_USER: ${{ github.repository_owner }}
          WASH_REG_PASSWORD: ${{ env.WASMCLOUD_PAT }}
        run: |
          wash reg push ghcr.io/${{ env.REPO_LOWER }}/${{ env.FEATURE_NAME }}/${{ env.FEATURE_NAME }}_actors/${{ env.FEATURE_NAME }}_${{ env.ACTOR_NAME }}:dev ${{ env.FEATURE_NAME }}_${{ env.ACTOR_NAME }}/build/${{ env.FEATURE_NAME }}_${{ env.ACTOR_NAME }}_s.wasm -a org.opencontainers.image.source=https://github.com/${{ github.REPOSITORY }} --allow-latest
